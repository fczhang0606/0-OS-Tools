################################################################################################################################
#!/usr/bin/env python

import rospy
from turtlesim.msg import Pose

def poseCallback(msg):
	rospy.loginfo("Turtle pose: x:%0.6f, y:%0.6f", msg.x, msg.y)

def pose_subscriber():
	rospy.init_node('pose_subscriber', anonymous=True)

	rospy.Subscriber("/turtle1/pose", Pose, poseCallback)

	rospy.spin()

if __name__ == '__main__':
	pose_subscriber()
################################################################################################################################
#include <ros/ros.h>
#include "turtlesim/Pose.h"

void poseCallback(const turtlesim::Pose::ConstPtr& msg)
{
	ROS_INFO("Turtle pose: x:%0.6f, y:%0.6f", msg->x, msg->y);
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "pose_subscriber");

	ros::NodeHandle n;

	ros::Subscriber pose_sub = n.subscribe("/turtle1/pose", 10, poseCallback);

	ros::spin();

	return 0;
}
################################################################################################################################
#!/usr/bin/env	python

import rospy
from geometry_msgs.msg import Twist

def velocity_publisher():

	rospy.init_node('velocity_publisher', anonymous=True)

	turtle_vel_pub = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

	rate = rospy.Rate(10)

	while not rospy.is_shutdown():
		vel_msg = Twist()
		vel_msg.linear.x = 0.5
		vel_msg.angular.z= 0.2

		turtle_vel_pub.publish(vel_msg)
		rospy.loginfo("Publish turtle velocity command[%0.2f m/s, %0.2f rad/s]",
				vel_msg.linear.x, vel_msg.angular.z)

		rate.sleep()



if __name__ == '__main__':
	try:
		velocity_publisher()
	except	rospy.ROSInterruptException:
		pass
################################################################################################################################
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>

int main(int argc, char **argv)
{
	ros::init(argc, argv, "velocity_publisher");

	ros::NodeHandle n;

	ros::Publisher turtle_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 10);

	ros::Rate loop_rate(10);

	int count = 0;
	while(ros::ok())
	{
		geometry_msgs::Twist	vel_msg;
		vel_msg.linear.x	= 0.5;
		vel_msg.angular.z	= 0.2;

		turtle_vel_pub.publish(vel_msg);
		ROS_INFO("Publish turtle velocity command[%0.2f m/s, %0.2f rad/s]",
			vel_msg.linear.x, vel_msg.angular.z);

		loop_rate.sleep();
	}

	return 0;
}
################################################################################################################################
################################################################################################################################

